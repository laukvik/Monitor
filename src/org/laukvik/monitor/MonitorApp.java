/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MonitorApp.java
 *
 * Created on Sep 6, 2011, 9:24:46 PM
 */
package org.laukvik.monitor;

import java.applet.AudioClip;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * @todo 
 * 
 * 
 * @author morten
 */
public class MonitorApp extends javax.swing.JFrame implements SensorListener, ActionListener {

    PopupMenu popupMenu;
    SystemTray tray; 
    TrayIcon trayIcon;
    List<SensorGroup>groups;
    SensorTable table;
    SensorService sm;
    
    AudioClip highAudioClip, lowAudioClip, downAudioClip;
    
    /** Creates new form MonitorApp */
    public MonitorApp(SystemTray systemTray) {
        setTitle( "Monitor" );
        getRootPane().putClientProperty( "apple.awt.brushMetalLook", Boolean.TRUE );
        getRootPane().putClientProperty("Window.style", "small");
        popupMenu = new PopupMenu();
        popupMenu.add( new MenuItem("Display") );
        popupMenu.addSeparator();
        popupMenu.add( new MenuItem("Start") );
        popupMenu.add( new MenuItem("Stop") );
        popupMenu.addSeparator();
        popupMenu.add( new MenuItem("Add sensor") );
        popupMenu.add( new MenuItem("Add group") );
        
        popupMenu.addSeparator();
        popupMenu.add( new MenuItem("Exit") );
        popupMenu.addActionListener( this );
        
        this.tray = systemTray;
        this.trayIcon = new TrayIcon( getIcon(), "Monitor", popupMenu );
        try {
            tray.add(trayIcon);
        } catch (Exception e) {
            System.err.println("TrayIcon could not be added.");
        }
        initComponents();
        sm = new SensorService();
        pack();
        loadGroups();
        setSize( 400, 400 );
        setVisible( true );
    }
    
    public void loadAudio(){
        try {
            highAudioClip = java.applet.Applet.newAudioClip(org.laukvik.monitor.MonitorApp.class.getResource(""));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void start(){
        for (SensorGroup g : groups){
            for (Sensor s : g.getSensorList()){
                s.start();
            }
        }
    }
    
    public void stop(){
        for (SensorGroup g : groups){
            for (Sensor s : g.getSensorList()){
                s.stop();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        System.out.println( evt.getActionCommand() );
        if (evt.getActionCommand() == null || evt.getActionCommand().length() == 0){
        } else if (evt.getActionCommand().equalsIgnoreCase("Exit")){
            System.exit(0);
        } else if (evt.getActionCommand().equalsIgnoreCase("Display")){
            this.setVisible( true );
        } else if (evt.getActionCommand().equalsIgnoreCase("Start")){
            start();
        } else if (evt.getActionCommand().equalsIgnoreCase("Stop")){
            stop();
        }
    }

    
    public Image getIcon(){
        return Toolkit.getDefaultToolkit().getImage( MonitorApp.class.getResource( "icon.png" ) );
    }

    
    public void loadGroups(){
        groups = sm.listGroups();
        for (SensorGroup g : groups){
            for (Sensor s : g.getSensorList()){
                s.addSensorListener( this );
            }
        }
        for (SensorGroup group : groups){
            sensorTabbedPane1.addTab( group.getTitle(), new SensorGroupPanel(group) );
        }
    }

    @Override
    public void statusChanged(SensorEvent evt) {
        System.out.println( "SensorChagned: " + evt.sensor.getValue() );
        sm.createHistory( evt.sensor );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sensorTabbedPane1 = new org.laukvik.monitor.SensorTabbedPane();

        getContentPane().add(sensorTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        MonitorPU mpu;
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MonitorApp(SystemTray.getSystemTray()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.laukvik.monitor.SensorTabbedPane sensorTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
